"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthPMv3 = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
class EthPMv3 {
    constructor(workingDirectory) {
        this.workingDirectory = workingDirectory;
        this.allEthpmFiles = glob_1.default.sync("**/*", {
            cwd: path_1.default.join(this.workingDirectory, "_ethpm_packages")
        });
    }
    require(importPath) {
        if (importPath.startsWith(".") || importPath.startsWith("/")) {
            return null;
        }
        // Look to see if we've compiled our own version first.
        var contractName = path_1.default.basename(importPath, ".sol");
        // We haven't compiled our own version. Assemble from data in the manifest.
        var separator = importPath.indexOf("/");
        var packageName = importPath.substring(0, separator);
        var installDirectory = path_1.default.join(this.workingDirectory, "_ethpm_packages");
        var manifest = path_1.default.join(installDirectory, packageName, "manifest.json");
        try {
            manifest = fs_1.default.readFileSync(manifest, "utf8");
        }
        catch (e) {
            return null;
        }
        manifest = JSON.parse(manifest);
        // TODO: contracts that reference other types
        // TODO: contract types that specify a hash as their key
        // TODO: imported name doesn't match type but matches deployment name
        var contractTypes = manifest.contractTypes || {};
        var type = contractTypes[contractName];
        // No contract name of the type asked.
        if (!type)
            return null;
        var json = {
            abi: type.abi,
            contractName: contractName,
            networks: {},
            unlinked_binary: type.deploymentBytecode.bytecode
        };
        // Go through deployments and save all of them
        Object.keys(manifest.deployments || {}).forEach(function (blockchain) {
            var deployments = manifest.deployments[blockchain];
            Object.keys(deployments).forEach(function (name) {
                var deployment = deployments[name];
                if (deployment.contractType === contractName) {
                    json.networks[blockchain] = {
                        events: {},
                        links: {},
                        address: deployment.address
                    };
                }
            });
        });
        return json;
    }
    resolve(importPath) {
        return __awaiter(this, void 0, void 0, function* () {
            var separator = importPath.indexOf("/");
            var packageName = importPath.substring(0, separator);
            var internalPath = importPath.substring(separator + 1);
            var installDir = this.workingDirectory;
            // If nothing's found, body returns `undefined`
            var body;
            var matches = this.allEthpmFiles.filter((p) => p.includes(importPath));
            while (true) {
                // check for root level ethpm sources
                var filePath = path_1.default.join(installDir, "_ethpm_packages", packageName, "_src", internalPath);
                try {
                    body = fs_1.default.readFileSync(filePath, { encoding: "utf8" });
                    break;
                }
                catch (err) { }
                filePath = path_1.default.join(installDir, "installed_contracts", packageName, "contracts", internalPath);
                try {
                    body = fs_1.default.readFileSync(filePath, { encoding: "utf8" });
                    break;
                }
                catch (err) { }
                if (matches.length === 1) {
                    try {
                        body = fs_1.default.readFileSync(path_1.default.join(installDir, "_ethpm_packages", matches[0]), { encoding: "utf8" });
                        break;
                    }
                    catch (err) { }
                }
                // Recurse outwards until impossible
                var oldInstallDir = installDir;
                installDir = path_1.default.join(installDir, "..");
                if (installDir === oldInstallDir) {
                    break;
                }
            }
            return { body, filePath: importPath };
        });
    }
    // We're resolving package paths to other package paths, not absolute paths.
    // This will ensure the source fetcher conintues to use the correct sources for packages.
    // i.e., if some_module/contracts/MyContract.sol imported "./AnotherContract.sol",
    // we're going to resolve it to some_module/contracts/AnotherContract.sol, ensuring
    // that when this path is evaluated this source is used again.
    resolveDependencyPath(importPath, dependencyPath) {
        var dirname = path_1.default.dirname(importPath);
        var resolvedDependencyPath = path_1.default.join(dirname, dependencyPath);
        // Note: We use `path.join()` here to take care of path idiosyncrasies
        // like joining "something/" and "./something_else.sol". However, this makes
        // paths OS dependent, and on Windows, makes the separator "\". Solidity
        // needs the separator to be a forward slash. Let's massage that here.
        resolvedDependencyPath = resolvedDependencyPath.replace(/\\/g, "/");
        return resolvedDependencyPath;
    }
}
exports.EthPMv3 = EthPMv3;
//# sourceMappingURL=ethpm-v3.js.map